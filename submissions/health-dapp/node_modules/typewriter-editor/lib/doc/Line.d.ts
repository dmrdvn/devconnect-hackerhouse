import Delta from '../delta/Delta';
import AttributeMap from '../delta/AttributeMap';
import { EditorRange } from './EditorRange';
export declare type LineRanges = Map<Line, EditorRange>;
export declare type LineIds = Map<string, Line>;
export declare type LineInfo = {
    ranges: LineRanges;
    ids: LineIds;
};
interface Line {
    id: string;
    attributes: AttributeMap;
    content: Delta;
    length: number;
}
declare namespace Line {
    function iterator(lines: Line[], lineIds?: LineIds): LineIterator;
    function linesToLineIds(lines: Line[]): Map<any, any>;
    function length(line: Line): number;
    function getId(line: Line): string;
    function equal(value: Line, other: Line): boolean;
    function fromDelta(delta: Delta, existing?: LineIds): Line[];
    function toDelta(lines: Line[]): Delta;
    function create(content?: Delta, attributes?: AttributeMap, id?: string | LineIds): Line;
    function createFrom(line?: Line, content?: Delta, lineIds?: LineIds): Line;
    function getLineRanges(lines: Line[]): LineRanges;
    function createId(existing?: LineIds): string;
}
export default Line;
export declare class LineIterator {
    lines: Line[];
    index: number;
    offset: number;
    lineIds: LineIds;
    constructor(lines: Line[], lineIds?: LineIds);
    hasNext(): boolean;
    next(length?: number): Line;
    peek(): Line;
    peekLength(): number;
    rest(): Line[];
}
