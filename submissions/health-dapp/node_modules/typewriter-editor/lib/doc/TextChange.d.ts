import AttributeMap from '../delta/AttributeMap';
import Delta from '../delta/Delta';
import TextDocument from './TextDocument';
import { EditorRange } from './EditorRange';
export default class TextChange {
    private _pos;
    doc: TextDocument | null;
    delta: Delta;
    selection?: EditorRange | null;
    activeFormats?: AttributeMap;
    constructor(doc: TextDocument | null, delta?: Delta, selection?: EditorRange | null, activeFormats?: AttributeMap);
    get contentChanged(): boolean;
    get selectionChanged(): boolean;
    apply(): void;
    setDelta(delta: Delta): this;
    setActiveFormats(activeFormats: AttributeMap): this;
    select(at: EditorRange | number | null): this;
    delete(range: EditorRange | null, options?: {
        dontFixNewline?: boolean;
    }): this;
    insert(at: number, insert: string | object, format?: AttributeMap, options?: {
        dontFixNewline?: boolean;
    }): this;
    insertContent(at: number, content: Delta): this;
    formatText(range: EditorRange, format?: AttributeMap): this;
    toggleTextFormat(range: EditorRange, format: AttributeMap): this;
    formatLine(range: EditorRange | number, format: AttributeMap, decoration?: boolean): this;
    toggleLineFormat(range: EditorRange | number, format: AttributeMap): this;
    removeFormat(range: EditorRange): this;
    transform(change: TextChange, priority?: boolean): TextChange;
    transformSelection(selection: EditorRange | null, priority?: boolean): EditorRange | null;
    transformAgainst(delta: TextChange | Delta, priority?: boolean): TextChange;
    isFor(doc: TextDocument): boolean;
    clone(): TextChange;
    private compose;
    private normalizePoint;
    private getFormatAt;
}
export declare function hasFormat(format: AttributeMap, attributes: AttributeMap): boolean;
