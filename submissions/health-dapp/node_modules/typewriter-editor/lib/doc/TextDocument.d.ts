import Delta from '../delta/Delta';
import Line, { LineIds } from './Line';
import AttributeMap from '../delta/AttributeMap';
import { EditorRange } from './EditorRange';
import TextChange from './TextChange';
export interface FormattingOptions {
    nameOnly?: boolean;
    allFormats?: boolean;
}
export default class TextDocument {
    private _ranges;
    byId: LineIds;
    lines: Line[];
    length: number;
    selection: EditorRange | null;
    constructor(lines?: TextDocument | Line[] | Delta, selection?: EditorRange | null);
    get change(): TextChange;
    getText(range?: EditorRange): string;
    getLineBy(id: string): Line;
    getLineAt(at: number): Line;
    getLinesAt(at: number | EditorRange, encompassed?: boolean): Line[];
    getLineRange(at: number | string | Line): EditorRange;
    getLineRanges(at?: number | EditorRange): EditorRange[];
    getLineFormat(at?: number | EditorRange, options?: FormattingOptions): AttributeMap;
    getTextFormat(at?: number | EditorRange, options?: FormattingOptions): AttributeMap;
    getFormats(at?: number | EditorRange, options?: FormattingOptions): AttributeMap;
    slice(start?: number, end?: number): Delta;
    apply(change: Delta | TextChange, selection?: EditorRange | null, throwOnError?: boolean): TextDocument;
    replace(delta?: Delta, selection?: EditorRange | null): TextDocument;
    toDelta(): Delta;
    equals(other: TextDocument, options?: {
        contentOnly?: boolean;
    }): boolean;
    toJSON(): Delta;
    toString(): string;
}
